# 네이버 항공권 MCP 사용 가이드

## 규칙
- 네이버 항공권 MCP를 사용하여 실시간 항공권 검색
- 모든 날짜에 대한 데이터를 수집할 것 (호출 오류를 제외)
- 월별로 분할하여 실행하여 API 호출 부담을 줄임

## 네이버 항공권 MCP 사용법

### MCP 도구 정보
- **도구명**: `search_naver_flights`
- **설명**: 네이버 항공권 검색 API를 사용하여 최저가 항공권 정보를 조회합니다
- **매개변수**:
  - `departure`: 출발지 공항 코드 (예: PUS, ICN, GMP)
  - `arrival`: 도착지 공항 코드 (예: TYO, NRT, HND)
  - `departureDate`: 출발일 (YYYY-MM-DD 형식)
  - `returnDate`: 복귀일 (YYYY-MM-DD 형식)

### 사용자 입력 예시
```
2025-12월,1월 5일 일정 부산(PUS) - 나리타(NRT) 최저가 일정 검색
```

## Python 도구 실행 (월별 분할 실행)

### 예시

## 2025년 12월
```bash
# 네이버 항공권 검색 (모든 항공사)
python flight_search_naver.py \
  --origin PUS \
  --destination NRT \
  --start-date 2025-12-01 \
  --end-date 2025-12-31 \
  --min-stay 5 \
  --max-stay 7 \
  --adults 1 \
  --save
```

## 2026년 1월
```bash
# 네이버 항공권 검색 (모든 항공사)
python flight_search_naver.py \
  --origin PUS \
  --destination NRT \
  --start-date 2026-01-01 \
  --end-date 2026-01-31 \
  --min-stay 5 \
  --max-stay 7 \
  --adults 1 \
  --save
```

## 데이터 처리 및 출력

0. 월별로 분할된 `flight_search_naver.py` 호출 후 각각 JSON 파일에 저장
1. **월별 파일명**: `PUS_NRT_naver_flights_YYYYMMDD_HHMMSS.json` (타임스탬프 포함)
2. **네이버 항공권 MCP**: 실시간 항공권 검색 결과 활용
3. **통합 처리**: 두 파일을 합쳐서 최종 분석 수행
4. **가격 없는 항공편 제거**
5. **각 출발일별 최저가 계산**
6. **가격 오름차순 정렬 후 상위 3개 선택**
7. 결과 표 작성

## 통합 데이터 처리 스크립트
```bash
# process_naver_flight_data.py 실행
python process_naver_flight_data.py --origin PUS --destination NRT
```

## 결과 표 형식
| 순위 | 출발일 | 복귀일 | 항공편 | 총요금 | 출발시간 | 도착시간 | 소요시간 |
| -- | --- | --- | --- | --- | ---- | ---- | ---- |

## 조사 로그

* 건너뛴 날짜
* 실패 호출 목록
* 필드 매핑 불확실성 (예: flight_number, total_price, duration 등)

## 예시 실행 순서

### 네이버 항공권 검색

1. **2025년 12월 검색 실행**
   ```bash
   python flight_search_naver.py --origin PUS --destination NRT --start-date 2025-12-01 --end-date 2025-12-31 --min-stay 5 --max-stay 7 --adults 1 --save
   ```

2. **2026년 1월 검색 실행**
   ```bash
   python flight_search_naver.py --origin PUS --destination NRT --start-date 2026-01-01 --end-date 2026-01-31 --min-stay 5 --max-stay 7 --adults 1 --save
   ```

3. **데이터 통합 및 분석**
   ```bash
   python process_naver_flight_data.py --origin PUS --destination NRT
   ```

4. **결과 확인**
   - `PUS_NRT_naver_flight_results.json`: 통합 분석 결과
   - `PUS_NRT_naver_final_results_summary.md`: 최종 요약 보고서

## 네이버 항공권 MCP 특징

### 장점
- **실시간 검색**: 네이버 항공권의 실시간 가격 정보 제공
- **정확한 가격**: 실제 예약 가능한 가격 정보
- **다양한 항공사**: 네이버에서 제공하는 모든 항공사 정보 포함

### 응답 형식
```json
{
  "순위": 1,
  "출발일": "20251201",
  "복귀일": "20251205",
  "가는편": "7C1153",
  "오는편": "7C1154",
  "총요금": "304,000원",
  "가는편 출발": "11:05",
  "가는편 도착": "13:10",
  "소요시간": "125분",
  "오는편 출발": "14:05",
  "오는편 도착": "16:45",
  "소요시간": "160분"
}
```

## 주요 공항 코드

### 한국
- **PUS**: 김해국제공항 (부산)
- **ICN**: 인천국제공항 (서울)
- **GMP**: 김포국제공항 (서울)

### 일본
- **NRT**: 나리타공항 (도쿄)
- **HND**: 하네다공항 (도쿄)
- **TYO**: 도쿄 (일반)
- **KIX**: 간사이공항 (오사카)

## 주의사항

1. **API 호출 제한**: 네이버 항공권 MCP의 호출 제한을 고려하여 월별로 분할 실행
2. **실시간 데이터**: 검색 시점의 실시간 가격이므로 예약 시 가격 변동 가능
3. **가격 형식**: "304,000원" 형식으로 반환되므로 숫자 추출 필요
4. **항공편 정보**: 항공편 번호와 시간 정보가 정확하게 제공됨

## Notion 업로드

최종 JSON 통합 후, 결과 표를 Notion 새 페이지에 작성

## 파일 구조

```
Google-Flights-MCP-Server/
├── flight_search_naver.py          # 네이버 항공권 검색 도구
├── process_naver_flight_data.py    # 네이버 항공권 데이터 처리 도구
├── prompt_naver.txt                # 네이버 항공권 사용 가이드
├── PUS_NRT_naver_flights_*.json   # 월별 검색 결과 파일들
├── PUS_NRT_naver_flight_results.json      # 통합 분석 결과
└── PUS_NRT_naver_final_results_summary.md # 최종 요약 보고서
```
